---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
  name: registry-data
  namespace: kube-system
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: registry-data
  namespace: kube-system
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 200Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/registry-data"
---
apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    name: registry
  name: registry
  namespace: kube-system
spec:
  replicas: 1
  selector:
    name: registry
  template:
    metadata:
      creationTimestamp: null
      labels:
        actual-registry: "true"
        name: registry
    spec:
      containers:
      - image: registry:2
        imagePullPolicy: Always
        name: registry
        ports:
        - containerPort: 5000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/registry
          name: registry-data
      nodeSelector:
        ingress-ready: "true"
      priorityClassName: system-node-critical
      restartPolicy: Always
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - operator: Exists
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: registry-data
        persistentVolumeClaim:
          claimName: registry-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: registry
  name: registry
  namespace: kube-system
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
  selector:
    actual-registry: "true"
